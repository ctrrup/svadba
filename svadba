<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Анна & Иван | Приглашение</title>
    <style>
        body {
            margin: 0;
            font-family: 'Playfair Display', serif;
            background: url('https://images.unsplash.com/photo-1511285560929-80b456fea0bc') no-repeat center center fixed;
            background-size: cover;
            color: #4a3c31;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            text-align: center;
            overflow: hidden;
        }
        .card {
            background: rgba(255, 245, 245, 0.95);
            border-radius: 15px;
            padding: 30px 20px;
            max-width: 350px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            margin: 20px;
        }
        h1 {
            font-size: 2.2em;
            margin: 0;
            color: #9c2c5b;
            font-weight: 700;
        }
        h2 {
            font-size: 1.5em;
            color: #9c2c5b;
            margin: 15px 0 10px;
        }
        p {
            font-size: 1.1em;
            margin: 8px 0;
            line-height: 1.5;
            font-family: 'Arial', sans-serif;
        }
        .rsvp-button {
            display: inline-block;
            padding: 12px 25px;
            background: #9c2c5b;
            color: white;
            text-decoration: none;
            border-radius: 20px;
            font-size: 1em;
            margin: 15px 0;
            transition: background 0.3s;
        }
        .rsvp-button:hover {
            background: #7b1f46;
        }
        .countdown {
            font-size: 1em;
            color: #4a3c31;
            margin: 10px 0;
        }
        .map {
            margin: 15px 0;
        }
        iframe {
            width: 100%;
            height: 200px;
            border: none;
            border-radius: 10px;
        }
        .divider {
            border-top: 1px solid #9c2c5b;
            margin: 15px 0;
        }
        @media (max-width: 400px) {
            .card {
                padding: 20px 15px;
                max-width: 90%;
            }
            h1 {
                font-size: 1.8em;
            }
            h2 {
                font-size: 1.3em;
            }
            p {
                font-size: 0.95em;
            }
            .rsvp-button {
                padding: 10px 20px;
                font-size: 0.9em;
            }
        }
    </style>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="card">
        <h1>Анна & Иван</h1>
        <p>С радостью приглашаем вас на нашу свадьбу!</p>
        <div class="divider"></div>
        <h2>Когда</h2>
        <p>20 июня 2026, 16:00</p>
        <h2>Где</h2>
        <p>Ресторан "Лебединое озеро"<br>ул. Примерная, 123, Москва</p>
        <div class="map">
            <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2245.123456789!2d37.6173!3d55.7558!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0x0!2z0J%2FRgNC%2B0YHQutC%2B0LU!5e0!3m2!1sru!2sru!4v1634567890123!5m2!1sru!2sru"></iframe>
        </div>
        <h2>Дресс-код</h2>
        <p>Коктейльный</p>
        <div class="countdown" id="countdown"></div>
        <a href="https://forms.gle/example" class="rsvp-button">Подтвердить участие</a>
    </div>
    <script>
        function updateCountdown() {
            const weddingDate = new Date("June 20, 2026 16:00:00").getTime();
            const now = new Date().getTime();
            const distance = weddingDate - now;
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            document.getElementById("countdown").innerText = `Осталось: ${days} дней, ${hours} часов`;
        }
        setInterval(updateCountdown, 60000);
        updateCountdown();
    </script>
</body>
</html>
